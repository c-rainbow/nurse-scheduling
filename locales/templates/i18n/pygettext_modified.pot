# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR ORGANIZATION
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-05-02 00:06-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: pygettext.py 1.5\n"


#: C:\Code\Python\shiftscheduler\shiftscheduler\i18n\pygettext_modified.py:23
msgid ""
"pygettext -- Python equivalent of xgettext(1)\n"
"\n"
"Many systems (Solaris, Linux, Gnu) provide extensive tools that ease the\n"
"internationalization of C programs. Most of these tools are independent of\n"
"the programming language and can be used from within Python programs.\n"
"Martin von Loewis' work[1] helps considerably in this regard.\n"
"\n"
"There's one problem though; xgettext is the program that scans source code\n"
"looking for message strings, but it groks only C (or C++). Python\n"
"introduces a few wrinkles, such as dual quoting characters, triple quoted\n"
"strings, and raw strings. xgettext understands none of this.\n"
"\n"
"Enter pygettext, which uses Python's standard tokenize module to scan\n"
"Python source code, generating .pot files identical to what GNU xgettext[2]\n"
"generates for C and C++ code. From there, the standard GNU tools can be\n"
"used.\n"
"\n"
"A word about marking Python strings as candidates for translation. GNU\n"
"xgettext recognizes the following keywords: gettext, dgettext, dcgettext,\n"
"and gettext_noop. But those can be a lot of text to include all over your\n"
"code. C and C++ have a trick: they use the C preprocessor. Most\n"
"internationalized C source includes a #define for gettext() to _() so that\n"
"what has to be written in the source is much less. Thus these are both\n"
"translatable strings:\n"
"\n"
"    gettext(\"Translatable String\")\n"
"    _(\"Translatable String\")\n"
"\n"
"Python of course has no preprocessor so this doesn't work so well.  Thus,\n"
"pygettext searches only for _() by default, but see the -k/--keyword flag\n"
"below for how to augment this.\n"
"\n"
" [1] http://www.python.org/workshops/1997-10/proceedings/loewis.html\n"
" [2] http://www.gnu.org/software/gettext/gettext.html\n"
"\n"
"NOTE: pygettext attempts to be option and feature compatible with GNU\n"
"xgettext where ever possible. However some options are still missing or are\n"
"not fully implemented. Also, xgettext's use of command line switches with\n"
"option arguments is broken, and in these cases, pygettext just defines\n"
"additional switches.\n"
"\n"
"Usage: pygettext [options] inputfile ...\n"
"\n"
"Options:\n"
"\n"
"    -a\n"
"    --extract-all\n"
"        Extract all strings.\n"
"\n"
"    -d name\n"
"    --default-domain=name\n"
"        Rename the default output file from messages.pot to name.pot.\n"
"\n"
"    -E\n"
"    --escape\n"
"        Replace non-ASCII characters with octal escape sequences.\n"
"        \n"
"    -c\n"
"    --to-code\n"
"        Specify the encoding of output file (if empty, use OS default).\n"
"\n"
"    -D\n"
"    --docstrings\n"
"        Extract module, class, method, and function docstrings.  These do\n"
"        not need to be wrapped in _() markers, and in fact cannot be for\n"
"        Python to consider them docstrings. (See also the -X option).\n"
"\n"
"    -h\n"
"    --help\n"
"        Print this help message and exit.\n"
"\n"
"    -k word\n"
"    --keyword=word\n"
"        Keywords to look for in addition to the default set, which are:\n"
"        %(DEFAULTKEYWORDS)s\n"
"\n"
"        You can have multiple -k flags on the command line.\n"
"\n"
"    -K\n"
"    --no-default-keywords\n"
"        Disable the default set of keywords (see above).  Any keywords\n"
"        explicitly added with the -k/--keyword option are still recognized.\n"
"\n"
"    --no-location\n"
"        Do not write filename/lineno location comments.\n"
"\n"
"    -n\n"
"    --add-location\n"
"        Write filename/lineno location comments indicating where each\n"
"        extracted string is found in the source.  These lines appear before\n"
"        each msgid.  The style of comments is controlled by the -S/--style\n"
"        option.  This is the default.\n"
"\n"
"    -o filename\n"
"    --output=filename\n"
"        Rename the default output file from messages.pot to filename.  If\n"
"        filename is `-' then the output is sent to standard out.\n"
"\n"
"    -p dir\n"
"    --output-dir=dir\n"
"        Output files will be placed in directory dir.\n"
"\n"
"    -S stylename\n"
"    --style stylename\n"
"        Specify which style to use for location comments.  Two styles are\n"
"        supported:\n"
"\n"
"        Solaris  # File: filename, line: line-number\n"
"        GNU      #: filename:line\n"
"\n"
"        The style name is case insensitive.  GNU style is the default.\n"
"\n"
"    -v\n"
"    --verbose\n"
"        Print the names of the files being processed.\n"
"\n"
"    -V\n"
"    --version\n"
"        Print the version of pygettext and exit.\n"
"\n"
"    -w columns\n"
"    --width=columns\n"
"        Set width of output to columns.\n"
"\n"
"    -x filename\n"
"    --exclude-file=filename\n"
"        Specify a file that contains a list of strings that are not be\n"
"        extracted from the input files.  Each string to be excluded must\n"
"        appear on a line by itself in the file.\n"
"\n"
"    -X filename\n"
"    --no-docstrings=filename\n"
"        Specify a file that contains a list of files (one per line) that\n"
"        should not have their docstrings extracted.  This is only useful in\n"
"        conjunction with the -D option above.\n"
"\n"
"If `inputfile' is -, standard input is read.\n"
msgstr ""

#: C:\Code\Python\shiftscheduler\shiftscheduler\i18n\pygettext_modified.py:183
msgid ""
"# SOME DESCRIPTIVE TITLE.\n"
"# Copyright (C) YEAR ORGANIZATION\n"
"# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.\n"
"#\n"
"msgid \"\"\n"
"msgstr \"\"\n"
"\"Project-Id-Version: PACKAGE VERSION\\n\"\n"
"\"POT-Creation-Date: %(time)s\\n\"\n"
"\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n"
"\"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n"
"\"Language-Team: LANGUAGE <LL@li.org>\\n\"\n"
"\"MIME-Version: 1.0\\n\"\n"
"\"Content-Type: text/plain; charset=%(charset)s\\n\"\n"
"\"Content-Transfer-Encoding: %(encoding)s\\n\"\n"
"\"Generated-By: pygettext.py %(version)s\\n\"\n"
"\n"
msgstr ""

#: C:\Code\Python\shiftscheduler\shiftscheduler\i18n\pygettext_modified.py:394
msgid "*** %(file)s:%(lineno)s: Seen unexpected token \"%(token)s\""
msgstr ""

#: C:\Code\Python\shiftscheduler\shiftscheduler\i18n\pygettext_modified.py:453
msgid "# File: %(filename)s, line: %(lineno)d"
msgstr ""

#: C:\Code\Python\shiftscheduler\shiftscheduler\i18n\pygettext_modified.py:461
msgid " %(filename)s:%(lineno)d"
msgstr ""

#: C:\Code\Python\shiftscheduler\shiftscheduler\i18n\pygettext_modified.py:518
msgid "Can't read --exclude-file: %s"
msgstr ""

#: C:\Code\Python\shiftscheduler\shiftscheduler\i18n\pygettext_modified.py:528
msgid "Working on %s"
msgstr ""

#: C:\Code\Python\shiftscheduler\shiftscheduler\i18n\pygettext_modified.py:560
msgid "*** Seen unexpected token \"%(token)s\""
msgstr ""

#: C:\Code\Python\shiftscheduler\shiftscheduler\i18n\pygettext_modified.py:561
msgid "morethanonestring"
msgstr ""

